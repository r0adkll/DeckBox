import kotlin.String;
import kotlin.collections.Set;
import kotlinx.datetime.LocalDateTime;

CREATE TABLE decks (
  id TEXT NOT NULL PRIMARY KEY,
  name TEXT,
  description TEXT,
  tags TEXT AS Set<String>,
  createdAt TEXT AS LocalDateTime,
  updatedAt TEXT AS LocalDateTime
);

getAll:
SELECT
  decks.*,
  group_concat(cards.image_small) AS cardImages,
  group_concat(cards.legalitiesStandard) AS legalitiesStandard,
  group_concat(cards.legalitiesExpanded) AS legalitiesExpanded,
  group_concat(cards.legalitiesUnlimited) AS legalitiesUnlimited
FROM decks
LEFT JOIN deck_card_join ON deck_card_join.deckId = decks.id
LEFT JOIN cards ON deck_card_join.cardId = cards.id
GROUP BY decks.id;

getById:
SELECT
  decks.*,
  group_concat(cards.image_small) AS cardImages,
  group_concat(cards.legalitiesStandard) AS legalitiesStandard,
  group_concat(cards.legalitiesExpanded) AS legalitiesExpanded,
  group_concat(cards.legalitiesUnlimited) AS legalitiesUnlimited
FROM decks
LEFT JOIN deck_card_join ON deck_card_join.deckId = decks.id
LEFT JOIN cards ON deck_card_join.cardId = cards.id
WHERE decks.id = ?
GROUP BY deck_card_join.deckId;

insert:
INSERT INTO decks
VALUES ?;

upsertName {
  UPDATE decks
  SET name = :name,
      updatedAt = :updatedAt
  WHERE id = :id;

  INSERT OR IGNORE INTO decks (id, name, updatedAt, createdAt)
  VALUES (:id, :name, :updatedAt, :createdAt);
}

upsertDescription {
  UPDATE decks
  SET description = :description,
      updatedAt = :updatedAt
  WHERE id = :id;

  INSERT OR IGNORE INTO decks(id, description, updatedAt, createdAt)
  VALUES (:id, :description, :updatedAt, :createdAt);
}

getTags:
SELECT tags FROM decks
WHERE id = ?;

upsertTags {
  UPDATE decks
  SET tags = :tags,
      updatedAt = :updatedAt
  WHERE id = :id;

  INSERT OR IGNORE INTO decks(id, tags, updatedAt, createdAt)
  VALUES (:id, :tags, :updatedAt, :createdAt);
}

delete:
DELETE FROM decks
WHERE id = :id;

